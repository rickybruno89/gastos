// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id             String    @id @default(cuid())
  name           String
  sharedExpenses Expense[]
}

model PaymentHistory {
  id        String   @id @default(cuid())
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expense   Expense  @relation(fields: [expenseId], references: [id])
  expenseId String
}

model Currency {
  id       String    @id @default(cuid())
  name     String // ARS - USD
  expenses Expense[]
}

model CreditCard {
  id        String    @id @default(cuid())
  name      String
  taxes     Decimal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
}

model PaymentType {
  id       String    @id @default(cuid())
  name     String // EFECTIVO - HOME BANKING - TRANSFERENCIA - DEBITO AUTOMATICO
  expenses Expense[]
}

model PaymentSource {
  id       String    @id @default(cuid())
  name     String // EFECTIVO - GALICIA - MACRO - HSBC - LEMON - PERSONAL PAY
  expenses Expense[]
}

model Expense {
  id                  String           @id @default(cuid())
  description         String
  notes               String
  amount              Decimal
  recurrent           Boolean
  installmentQuantity Int?
  installmentAmount   Decimal?
  paymentBeginning    DateTime?
  discount            Decimal?
  paymentsHistory     PaymentHistory[]
  sharedWith          Person[]
  creditCard          CreditCard?      @relation(fields: [creditCardId], references: [id])
  creditCardId        String?
  currency            Currency         @relation(fields: [currencyId], references: [id])
  currencyId          String
  paymentType         PaymentType      @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId       String
  paymentSource       PaymentSource    @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId     String
  user                User             @relation(fields: [userId], references: [id])
  userId              String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}
