datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  expenses           Expense[]
  creditCardExpenses CreditCardExpense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id                           String                  @id @default(cuid())
  name                         String
  sharedExpenses               Expense[]
  sharedCreditCardExpenseItems CreditCardExpenseItem[]
  deleted                      Boolean
  deletedAt                    DateTime
}

model Currency {
  id                     String                  @id @default(cuid())
  name                   String // ARS - USD
  expenses               Expense[]
  creditCardExpenseItems CreditCardExpenseItem[]
  deleted                Boolean
  deletedAt              DateTime
}

model PaymentType {
  id                         String                     @id @default(cuid())
  name                       String // EFECTIVO - HOME BANKING - TRANSFERENCIA - DEBITO AUTOMATICO
  expenses                   Expense[]
  expensePaymentSummaries    ExpensePaymentSummary[]
  creditCardExpenses         CreditCardExpense[]
  creditCardPaymentSummaries CreditCardPaymentSummary[]
  deleted                    Boolean
  deletedAt                  DateTime
}

model PaymentSource {
  id                         String                     @id @default(cuid())
  name                       String // EFECTIVO - GALICIA - MACRO - HSBC - LEMON - PERSONAL PAY
  expenses                   Expense[]
  expensePaymentSummaries    ExpensePaymentSummary[]
  creditCardExpenses         CreditCardExpense[]
  creditCardPaymentSummaries CreditCardPaymentSummary[]
  deleted                    Boolean
  deletedAt                  DateTime
}

model CreditCardExpenseItem {
  id                  String            @id @default(cuid())
  description         String
  notes               String
  amount              Decimal
  sharedWith          Person[]
  currency            Currency          @relation(fields: [currencyId], references: [id])
  currencyId          String
  recurrent           Boolean
  installmentQuantity Int               @default(0)
  installmentAmount   Decimal           @default(0)
  paymentBeginning    DateTime          @default(now())
  discount            Decimal           @default(0)
  creditCardExpense   CreditCardExpense @relation(fields: [creditCardExpenseId], references: [id])
  creditCardExpenseId String
  deleted             Boolean
  deletedAt           DateTime
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model CreditCardExpense {
  id                     String                     @id @default(cuid())
  name                   String
  taxes                  Decimal
  paymentType            PaymentType                @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId          String
  paymentSource          PaymentSource              @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId        String
  paymentSummaries       CreditCardPaymentSummary[]
  creditCardExpenseItems CreditCardExpenseItem[]
  user                   User                       @relation(fields: [userId], references: [id])
  userId                 String
  deleted                Boolean
  deletedAt              DateTime
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
}

model CreditCardPaymentSummary {
  id                  String            @id @default(cuid())
  date                DateTime
  amount              Decimal
  paid                Boolean           @default(false)
  paymentType         PaymentType       @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId       String
  paymentSource       PaymentSource     @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId     String
  creditCardExpense   CreditCardExpense @relation(fields: [creditCardExpenseId], references: [id])
  creditCardExpenseId String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Expense {
  id               String                  @id @default(cuid())
  description      String
  notes            String
  amount           Decimal
  recurrent        Boolean
  sharedWith       Person[]
  currency         Currency                @relation(fields: [currencyId], references: [id])
  currencyId       String
  paymentType      PaymentType             @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId    String
  paymentSource    PaymentSource           @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId  String
  user             User                    @relation(fields: [userId], references: [id])
  userId           String
  paymentSummaries ExpensePaymentSummary[]
  deleted          Boolean
  deletedAt        DateTime
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
}

model ExpensePaymentSummary {
  id              String        @id @default(cuid())
  date            DateTime
  amount          Decimal
  paid            Boolean       @default(false)
  expense         Expense       @relation(fields: [expenseId], references: [id])
  expenseId       String
  paymentType     PaymentType   @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId   String
  paymentSource   PaymentSource @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
