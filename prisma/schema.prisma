datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                     @id @default(cuid())
  name                       String?
  email                      String?                    @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  sessions                   Session[]
  sharedPaymentPersons       Person[]
  paymentTypes               PaymentType[]
  paymentSources             PaymentSource[]
  expenses                   Expense[]
  expensePaymentSummaries    ExpensePaymentSummary[]
  creditCards                CreditCard[]
  creditCardPaymentSummaries CreditCardPaymentSummary[]
  creditCardExpenseItems     CreditCardExpenseItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id                           String                  @id @default(cuid())
  name                         String
  sharedExpenses               Expense[]
  sharedCreditCardExpenseItems CreditCardExpenseItem[]
  user                         User                    @relation(fields: [userId], references: [id])
  userId                       String
  deleted                      Boolean                 @default(false)
  deletedAt                    DateTime?

  @@unique([name, userId])
}

model Currency {
  id                     String                  @id @default(cuid())
  name                   String // ARS - USD 
  useAsDefault           Boolean                 @default(false)
  expenses               Expense[]
  creditCardExpenseItems CreditCardExpenseItem[]
}

model PaymentType {
  id                         String                     @id @default(cuid())
  name                       String // EFECTIVO - HOME BANKING - TRANSFERENCIA - DEBITO AUTOMATICO
  expenses                   Expense[]
  expensePaymentSummaries    ExpensePaymentSummary[]
  creditCards                CreditCard[]
  creditCardPaymentSummaries CreditCardPaymentSummary[]
  user                       User                       @relation(fields: [userId], references: [id])
  userId                     String
  deleted                    Boolean                    @default(false)
  deletedAt                  DateTime?

  @@unique([userId, name])
}

model PaymentSource {
  id                         String                     @id @default(cuid())
  name                       String // EFECTIVO - GALICIA - MACRO - HSBC - LEMON - PERSONAL PAY
  expenses                   Expense[]
  expensePaymentSummaries    ExpensePaymentSummary[]
  creditCards                CreditCard[]
  creditCardPaymentSummaries CreditCardPaymentSummary[]
  user                       User                       @relation(fields: [userId], references: [id])
  userId                     String
  deleted                    Boolean                    @default(false)
  deletedAt                  DateTime?

  @@unique([userId, name])
}

model CreditCard {
  id                     String                     @id @default(cuid())
  name                   String
  taxesPercent           Float
  paymentType            PaymentType                @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId          String
  paymentSource          PaymentSource              @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId        String
  paymentSummaries       CreditCardPaymentSummary[]
  creditCardExpenseItems CreditCardExpenseItem[]
  user                   User                       @relation(fields: [userId], references: [id])
  userId                 String
  deleted                Boolean                    @default(false)
  deletedAt              DateTime?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
}

model CreditCardExpenseItem {
  id                   String                         @id @default(cuid())
  description          String
  notes                String
  amount               Float                          @default(0) // only for items with installments (this is the total amount)
  sharedWith           Person[]
  currency             Currency                       @relation(fields: [currencyId], references: [id])
  currencyId           String
  recurrent            Boolean
  installmentsQuantity Int                            @default(0)
  installmentsPaid     Int                            @default(0)
  installmentsAmount   Float // this is the amount for recurrent items TOO
  paymentBeginning     String
  finished             Boolean                        @default(false)
  finishedAt           DateTime?
  creditCard           CreditCard                     @relation(fields: [creditCardId], references: [id])
  creditCardId         String
  paymentHistory       CreditCardSummaryExpenseItem[]
  user                 User                           @relation(fields: [userId], references: [id])
  userId               String
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt

  @@index([finished, recurrent])
}

model CreditCardSummaryExpenseItem {
  id                         String                   @id @default(cuid())
  creditCardExpenseItem      CreditCardExpenseItem    @relation(fields: [creditCardExpenseItemId], references: [id])
  creditCardExpenseItemId    String
  creditCardPaymentSummary   CreditCardPaymentSummary @relation(fields: [creditCardPaymentSummaryId], references: [id])
  creditCardPaymentSummaryId String
  installmentsPaid           Int                      @default(0)
  installmentsAmount         Float                    @default(0)
}

model CreditCardPaymentSummary {
  id                 String                         @id @default(cuid())
  date               String
  amount             Float
  paid               Boolean                        @default(false)
  paymentType        PaymentType                    @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId      String
  paymentSource      PaymentSource                  @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId    String
  itemHistoryPayment CreditCardSummaryExpenseItem[]
  creditCard         CreditCard                     @relation(fields: [creditCardId], references: [id])
  creditCardId       String
  user               User                           @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime                       @default(now())
  updatedAt          DateTime                       @updatedAt
}

model Expense {
  id               String                  @id @default(cuid())
  description      String
  notes            String
  amount           Float
  sharedWith       Person[]
  currency         Currency                @relation(fields: [currencyId], references: [id])
  currencyId       String
  paymentType      PaymentType             @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId    String
  paymentSource    PaymentSource           @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId  String
  user             User                    @relation(fields: [userId], references: [id])
  userId           String
  paymentSummaries ExpensePaymentSummary[]
  deleted          Boolean                 @default(false)
  deletedAt        DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
}

model ExpensePaymentSummary {
  id              String        @id @default(cuid())
  expense         Expense       @relation(fields: [expenseId], references: [id])
  expenseId       String
  date            String
  amount          Float
  paid            Boolean       @default(false)
  paymentType     PaymentType   @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId   String
  paymentSource   PaymentSource @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([expenseId, date])
}
